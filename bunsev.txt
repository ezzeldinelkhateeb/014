import { cache } from "./cache";
import { dataStorage } from "./data-storage";
import { LibraryData } from "@/types/library-data";
import { showToast } from "../hooks/use-toast";
import { saveAs } from 'file-saver';
import * as XLSX from 'xlsx';
import { collectionHelper } from "./collection-helper"; // Import collection helper

// Define interfaces for API responses
interface Library {
  id: string;
  name: string;
  apiKey?: string; // Added apiKey
  collections?: Collection[]; // Added collections
  videoCount?: number; // Added videoCount
  storageUsage?: number;
  trafficUsage?: number;
  dateCreated?: string;
  regions?: string[];
  resolutions?: string[];
  bitrates?: { [key: string]: number };
  settings?: {
    allowDirectPlay?: boolean;
    enableMP4Fallback?: boolean;
    keepOriginalFiles?: boolean;
    playerKeyColor?: string;
    fontFamily?: string;
  };
}

export interface Collection { // Added export
  id: string;
  name: string;
  videoCount?: number;
  dateCreated?: string;
}

interface Video {
  guid: string;
  title: string;
}

interface LibraryBandwidthData {
  [key: string]: {
    [date: string]: number;
  };
}

type ProcessingStatus = "pending" | "processing" | "completed" | "error";

interface VideoMetadata {
  library?: string;
  collection?: string;
  year?: string;
}

interface QueueItem {
  id: string;
  filename: string;
  status: ProcessingStatus;
  progress: number;
  errorMessage?: string;
  metadata: VideoMetadata;
}

interface BandwidthStat {
  date: string;
  bytesUsed: number;
  totalCost: number;
}

interface BunnyStatistic {
  Date: string;
  TotalRequests: number;
  TotalBytes: number;
  CacheHits: number;
  Status2xx: number;
  Status3xx: number;
  Status4xx: number;
  Status5xx: number;
}

interface BunnyStatisticsResponse {
  Statistics: BunnyStatistic[];
  From: string;
  To: string;
}

interface BunnyStatsResponse {
  BandwidthUsedChart: { [key: string]: number };
  TotalBandwidthUsed: number;
  UserBalanceHistoryChart: { [key: string]: number };
}

interface LibraryBandwidth {
  libraryName: string;
  bandwidth: {
    date: string;
    gigabytes: number;
    cost: number;
  }[];
}

interface StatisticsResponse {
  Statistics: Array<{
    Date: string;
    TotalBytes: number;
    TotalRequests: number;
    CacheHits: number;
    Status2xx: number;
    Status3xx: number;
    Status4xx: number;
    Status5xx: number;
  }>;
  From: string;
  To: string;
}

interface StatisticsChunk {
  startDate: Date;
  endDate: Date;
  data: StatisticsResponse;
}

class BunnyService {
  private baseUrl = "https://api.bunny.net";
  private videoBaseUrl = "https://video.bunnycdn.com";
  private publicApiKey: string;
  private currentLibraryKey: string | null = null;
  private apiKey: string;
  private initialized = false;
  private initializationError: string | null = null;
  private storage = dataStorage;
  private collectionHelper = collectionHelper;

  constructor() {
    // Get API key from environment
    this.publicApiKey = import.meta.env.VITE_BUNNY_API_KEY || "";
    this.apiKey = this.publicApiKey;
    
    // Store API key in cache
    if (this.publicApiKey) {
      cache.set('default_api_key', this.publicApiKey);
    }
    
    // Initialize with stored API key if available
    const storedApiKey = localStorage.getItem("bunny_api_key");
    if (storedApiKey) {
      this.currentLibraryKey = storedApiKey;
    }
  }

  setLibraryApiKey(libraryId: string, apiKey: string): void {
    cache.set(`library_${libraryId}_api`, apiKey);
    if (apiKey) {
      this.currentLibraryKey = apiKey;
      localStorage.setItem("bunny_api_key", apiKey);
    }
  }

  private getApiKey(libraryId?: string, accessToken?: string): string {
    // 1. Use provided access token if available
    if (accessToken) {
      return accessToken;
    }

    // 2. For main API endpoints, use the main API key
    if (!libraryId) {
      return this.apiKey || this.publicApiKey;
    }

    // 3. For library-specific operations, try to get library key
    const libraryKey = cache.get(`library_${libraryId}_api`);
    if (libraryKey) {
      return libraryKey;
    }

    // 4. Fallback to current library key or public key
    return this.currentLibraryKey || this.apiKey || this.publicApiKey;
  }

  private async fetchWithError(
    url: string,
    options: RequestInit = {},
    libraryId?: string,
    accessToken?: string,
  ): Promise<any> {
    try {
      const apiKey = this.getApiKey(libraryId, accessToken);
      
      if (!apiKey) {
        throw new Error('No API key available');
      }

      // Set up headers for API access
      const headers = new Headers({
        Accept: "application/json",
        "Content-Type": options.method === "PUT" ? "application/octet-stream" : "application/json",
        AccessKey: apiKey,
      });

      // Try direct approach first (will likely fail due to CORS in browser)
      try {
        const response = await fetch(url, {
          ...options,
          headers,
        });

        if (response.status === 401) {
          throw new Error("Unauthorized: Please check your API key");
        }

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
        }

        const contentType = response.headers.get("content-type");
        return contentType?.includes("application/json")
          ? response.json()
          : response.text();
      } catch (error) {
        // If we're in a browser and get a CORS error, try local storage cache
        if (typeof window !== 'undefined' && error instanceof Error && 
            (error.message.includes('CORS') || error.name === 'TypeError')) {
          
          console.warn('CORS error when accessing Bunny API directly, trying alternative approach');
          
          // For collections, try to find from cached library data
          if (url.includes('/collections') && libraryId) {
            const savedData = await this.storage.getLibraryData();
            if (savedData) {
              const library = savedData.libraries.find(lib => lib.id === libraryId);
              if (library && library.collections) {
                console.log('Using cached collections data');
                return { 
                  items: library.collections.map(col => ({
                    guid: col.id,
                    id: col.id,
                    name: col.name
                  }))
                };
              }
            }
          }
          
          // For other operations, we need to throw and handle appropriately
          throw new Error('API request blocked by CORS. Try a server-side implementation instead.');
        }
        
        // Re-throw the original error if not CORS-related or we can't handle it
        throw error;
      }
    } catch (error) {
      console.error(`Error fetching ${url}:`, error);
      throw error;
    }
  }

  async initialize(): Promise<void> {
    try {
      const savedData = dataStorage.getLibraryData();
      if (savedData) {
        // Use saved encrypted data
        this.setLibraryApiKey('default', savedData.mainApiKey);
        savedData.libraries.forEach(lib => {
          if (lib.apiKey) {
            cache.set(`library_${lib.id}_api`, lib.apiKey);
          }
        });
        return;
      }

      // Fallback to API if no saved data
      await this.initializeFromAPI();
    } catch (error) {
      console.error('Error initializing:', error);
      throw error;
    }
  }

  async initializeFromAPI() {
    // Add implementation
    try {
      // Add your initialization logic here
      return true;
    } catch (error) {
      console.error('Failed to initialize from API:', error);
      throw error;
    }
  }

  private async ensureInitialized(): Promise<void> {
    if (!this.initialized) {
      if (this.initializationError) {
        throw new Error(
          `Service not properly initialized: ${this.initializationError}`,
        );
      }
      await this.initialize();
    }
  }

  async getLibraries(): Promise<Library[]> {
    try {
      let allLibraries: Library[] = [];
      let currentPage = 1;
      let hasMorePages = true;

      while (hasMorePages) {
        const response = await this.fetchWithError(
          `${this.baseUrl}/videolibrary?page=${currentPage}&perPage=100`,
          { method: "GET" },
        );

        const libraries = (response.Items || []).map(
          (lib: any): Library => ({
            id: lib.Id?.toString() || "",
            name: lib.Name || "Unnamed Library",
            videoCount: lib.VideoCount || 0,
            storageUsage: lib.StorageUsage || 0,
            trafficUsage: lib.TrafficUsage || 0,
            dateCreated: lib.DateCreated || "",
            apiKey: lib.ApiKey || "",
            regions: lib.ReplicationRegions || [],
            resolutions: (lib.EnabledResolutions || "")
              .split(",")
              .filter(Boolean),
            bitrates: {
              "240p": lib.Bitrate240p || 0,
              "360p": lib.Bitrate360p || 0,
              "480p": lib.Bitrate480p || 0,
              "720p": lib.Bitrate720p || 0,
              "1080p": lib.Bitrate1080p || 0,
              "1440p": lib.Bitrate1440p || 0,
              "2160p": lib.Bitrate2160p || 0,
            },
            settings: {
              allowDirectPlay: lib.AllowDirectPlay || false,
              enableMP4Fallback: lib.EnableMP4Fallback || false,
              keepOriginalFiles: lib.KeepOriginalFiles || false,
              playerKeyColor: lib.PlayerKeyColor || "#ffffff",
              fontFamily: lib.FontFamily || "",
            },
          }),
        );

        allLibraries = [...allLibraries, ...libraries];
        
        // Check if we have more pages
        if (!response.Items || response.Items.length < 100) {
          hasMorePages = false;
        } else {
          currentPage++;
        }
      }

      return allLibraries;
    } catch (error) {
      console.error("Error fetching libraries:", error);
      throw error;
    }
  }

  async getCollections(libraryId: string): Promise<Collection[]> {
    if (!libraryId) {
      console.warn("No library ID provided to getCollections");
      return [];
    }

    try {
      const apiKey = cache.get(`library_${libraryId}_api`);
      if (!apiKey) {
        console.error(`No API key found for library ${libraryId}`);
        return [];
      }

      const response = await this.fetchWithError(
        `${this.videoBaseUrl}/library/${libraryId}/collections?page=1&itemsPerPage=100&orderBy=date`,
        { method: "GET" },
        libraryId,
      );

      const items = Array.isArray(response) ? response : response?.items || [];

      return items.map(
        (col: any): Collection => ({
          id: String(col.guid || col.Guid || ""),
          name: col.name || col.Name || "",
          videoCount: parseInt(col.videoCount || col.VideoCount || "0", 10),
          dateCreated: col.dateCreated || col.DateCreated || "",
        }),
      );
    } catch (error) {
      console.error(`Error fetching collections: ${error}`);
      return [];
    }
  }

  async getVideos(
    libraryId: string,
    collectionId?: string,
    accessToken?: string,
  ): Promise<Video[]> {
    try {
      const url = `${this.videoBaseUrl}/library/${libraryId}/videos?page=1&itemsPerPage=100${collectionId ? `&collection=${collectionId}` : ""}`;
      const response = await this.fetchWithError(
        url,
        { method: "GET" },
        libraryId,
        accessToken,
      );

      const videos = (response.items || []).map(
        (video: any): Video => ({
          guid: video.guid || "",
          title: video.title || "",
        }),
      );

      // Enhanced sorting function
      return videos.sort((a: Video, b: Video) => {
        // Extract lecture numbers
        const getLectureNumber = (title: string) => {
          const match = title.match(/Lecture (\d+)/i);
          return match ? parseInt(match[1]) : 0;
        };

        // Extract question numbers
        const getQuestionNumber = (title: string) => {
          const match = title.match(/Q(\d+)/i);
          return match ? parseInt(match[1]) : 0;
        };

        // Get lecture and question numbers for both videos
        const lectureA = getLectureNumber(a.title);
        const lectureB = getLectureNumber(b.title);
        const questionA = getQuestionNumber(a.title);
        const questionB = getQuestionNumber(b.title);

        // Sort by lecture number first (descending)
        if (lectureA !== lectureB) {
          return lectureB - lectureA; // Higher lecture numbers first
        }

        // Then sort by question number
        return questionA - questionB;
      });

    } catch (error) {
      console.error("Error fetching videos:", error);
      throw error;
    }
  }

  async getVideoEmbedCode(
    libraryId: string,
    videoGuid: string,
  ): Promise<string> {
    // Generate embed code in the exact format from the Python backend, with autoplay=false
    return `
<div style="position:relative;padding-top:56.25%;"><iframe src="https://iframe.mediadelivery.net/embed/${libraryId}/${videoGuid}?autoplay=false&loop=false&muted=false&preload=true&responsive=true" loading="lazy" style="border:0;position:absolute;top:0;height:100%;width:100%;" allow="accelerometer;gyroscope;autoplay;encrypted-media;picture-in-picture;" allowfullscreen="true"></iframe></div>
    `.trim();
  }

  // Enhanced method to create collection with better error handling
  async createCollection(
    libraryId: string,
    collectionName: string,
    accessToken?: string
  ) {
    try {
      if (!collectionName || collectionName.trim() === '') {
        console.log('Using default collection: no collection name provided');
        return { 
          id: "", 
          guid: "", 
          name: "",
          message: "Using default collection (no name provided)"
        };
      }

      console.log(`Creating collection "${collectionName}" in library ${libraryId}`);
      
      // Check if collection already exists
      try {
        const collections = await this.getCollections(libraryId);
        console.log(`Found ${collections.length} existing collections in library ${libraryId}`);
        
        const existingCollection = collections.find(c => 
          c.name.toLowerCase() === collectionName.toLowerCase()
        );
        
        if (existingCollection) {
          console.log(`Collection "${collectionName}" already exists with ID ${existingCollection.id}`);
          
          // Store in collection helper for future reference
          if (collectionHelper && typeof collectionHelper.storeCollectionInfo === 'function') {
            collectionHelper.storeCollectionInfo(libraryId, existingCollection.id, collectionName);
          }
          
          return existingCollection;
        }
      } catch (error) {
        console.warn('Error checking existing collections:', error);
      }
      
      // Try to use server proxy if available to avoid CORS issues
      try {
        console.log('Attempting to create collection via proxy:', {
          libraryId,
          collectionName
        });
        
        const response = await fetch('/api/proxy/create-collection', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            libraryId,
            collectionName,
            accessToken: accessToken || this.getApiKey(libraryId, accessToken)
          })
        });
        
        if (response.ok) {
          const data = await response.json();
          console.log('Collection created through proxy:', data);
          
          // Store in collection helper for future use
          if (data.guid && collectionHelper) {
            collectionHelper.storeCollectionInfo(libraryId, data.guid, collectionName);
          }
          
          return data;
        } else {
          const errorText = await response.text();
          console.error('Proxy collection creation failed with status:', response.status, errorText);
        }
      } catch (proxyError) {
        console.warn('Proxy collection creation failed, falling back to direct API:', proxyError);
      }
      
      // Create collection through direct API as fallback
      console.log('Attempting to create collection through direct API');
      const data = await this.fetchWithError(
        `${this.videoBaseUrl}/library/${libraryId}/collections`,
        {
          method: "POST",
          body: JSON.stringify({
            name: collectionName
          }),
        },
        libraryId,
        accessToken
      );
      
      console.log('Direct API collection creation response:', data);
      
      // Store in collection helper
      if (data.guid && collectionHelper) {
        collectionHelper.storeCollectionInfo(libraryId, data.guid, collectionName);
      }
      
      return data;
    } catch (error) {
      console.error('Error creating/finding collection:', error);
      
      // Return a proper object with the collection name preserved
      return { 
        id: "", 
        guid: "", 
        name: collectionName, // Keep the collection name here
        message: "Collection creation failed, video will be uploaded without collection"
      };
    }
  }

  // Update uploadVideo to handle collections better
  async uploadVideo(
    file: File,
    libraryId: string,
    onProgress?: (progress: number, bytesLoaded: number) => void,
    collectionId?: string,
    accessToken?: string,
    signal?: AbortSignal,
    customFilename?: string,
    chunkSize: number = 20 * 1024 * 1024 // زيادة حجم القطع إلى 20 ميجا لتحسين السرعة
  ): Promise<{ guid: string; title: string; collectionName?: string }> {
    try {
      // Ensure libraryId is a valid number or string representation of a number if necessary
      // For Bunny API, libraryId is typically a number.
      if (!libraryId || isNaN(parseInt(libraryId))) {
          throw new Error(`Invalid libraryId provided: ${libraryId}`);
      }

      // Determine the title for the video entry
      const videoTitle = customFilename || file.name;

      // Prepare data for creating the video entry
      const createData: { title: string; collectionId?: string } = {
        title: videoTitle,
      };

      // Only add collectionId to request if it's a non-empty string
      if (collectionId && collectionId.trim() !== '') {
        createData.collectionId = collectionId;
        console.log(`Adding video to collection: ${collectionId}`);
      } else {
        console.log('No valid collection ID, using default collection');
      }

      // Correct URL for creating the video entry
      const createVideoUrl = `${this.videoBaseUrl}/library/${libraryId}/videos`;
      console.log(`Creating video entry at: ${createVideoUrl} with title: ${videoTitle}`);

      const createResponse = await this.fetchWithError(
        createVideoUrl, // Use the corrected URL
        {
          method: "POST",
          body: JSON.stringify(createData), // Ensure createData is stringified
        },
        libraryId, // Pass libraryId for potential API key retrieval in fetchWithError
        accessToken
      );

      if (!createResponse?.guid) {
        // Log the response if creation failed
        console.error("Failed to create video entry. Response:", createResponse);
        throw new Error("Failed to create video entry - no GUID received");
      }

      console.log(`Video entry created with GUID: ${createResponse.guid}`);

      // Upload the actual file with progress tracking
      const xhr = new XMLHttpRequest();
      // ... rest of the upload logic using createResponse.guid ...

      // Construct the final URL for the PUT request (file upload)
      const uploadUrl = `${this.videoBaseUrl}/library/${libraryId}/videos/${createResponse.guid}`;

      return new Promise((resolve, reject) => {
        xhr.open("PUT", uploadUrl, true);

        // Set headers for the PUT request
        const apiKey = this.getApiKey(libraryId, accessToken);
        if (!apiKey) {
          reject(new Error("API key not found for upload"));
          return;
        }
        xhr.setRequestHeader('AccessKey', apiKey);
        xhr.setRequestHeader('Content-Type', 'application/octet-stream');
        // Add other headers as before
        xhr.setRequestHeader('Cache-Control', 'no-cache');
        xhr.setRequestHeader('Accept-Encoding', 'gzip, deflate, br');
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

        // Progress tracking
        xhr.upload.onprogress = (event) => {
          if (event.lengthComputable && onProgress) {
            const progress = Math.round((event.loaded / event.total) * 100);
            onProgress(progress, event.loaded);
          }
        };

        // Completion handling
        xhr.onload = () => {
          if (xhr.status >= 200 && xhr.status < 300) {
            console.log(`File upload successful for GUID: ${createResponse.guid}`);
            // Fetch collection name if ID exists
            let collectionName = '';
            if (collectionId) {
              // You might need a helper function or cache lookup here
              // For simplicity, returning the ID for now
              collectionName = collectionId; // Placeholder
            }
            resolve({
              guid: createResponse.guid,
              title: videoTitle, // Use the title used for creation
              collectionName
            });
          } else {
            reject(new Error(`Upload failed with status ${xhr.status}: ${xhr.responseText}`));
          }
        };

        // Error handling
        xhr.onerror = () => reject(new Error("Network error during upload"));
        xhr.ontimeout = () => reject(new Error("Upload timed out"));

        // Abort signal handling
        if (signal) {
          signal.addEventListener('abort', () => {
            xhr.abort();
            reject(new Error("Upload aborted by user"));
          });
        }

        // Send the file
        xhr.send(file);
      });

    } catch (error) {
      // Ensure AbortError is re-thrown correctly
      if (error instanceof DOMException && error.name === 'AbortError') {
         throw error; // Re-throw AbortError specifically
      }
      console.error("Error uploading video:", error);
      // Include more details in the thrown error if possible
      const errorMessage = error instanceof Error ? error.message : String(error);
      throw new Error(`Upload process failed: ${errorMessage}`);
    }
  }

  // إضافة دالة جديدة لرفع الملفات باستخدام Streams API
  async uploadVideoWithStreams(
    file: File,
    libraryId: string,
    onProgress?: (progress: number, bytesLoaded: number) => void,
    collectionId?: string,
    accessToken?: string,
    signal?: AbortSignal,
    customFilename?: string
  ): Promise<{ guid: string; title: string; collectionName?: string }> {
    if (!file.stream) {
      // إذا لم تكن Streams API مدعومة، استخدم الطريقة التقليدية
      return this.uploadVideo(file, libraryId, onProgress, collectionId, accessToken, signal, customFilename);
    }
    
    try {
      // إنشاء الفيديو في المكتبة أولاً
      const videoTitle = customFilename || file.name;
      
      // إنشاء بيانات الطلب الأساسية
      const createData: any = { title: videoTitle };
      
      if (collectionId && collectionId.trim() !== '') {
        createData.collectionId = collectionId;
      }

      const createResponse = await this.fetchWithError(
        `${this.videoBaseUrl}/library/${libraryId}/videos`,
        {
          method: "POST",
          body: JSON.stringify(createData),
        },
        libraryId,
        accessToken
      );

      if (!createResponse?.guid) {
        throw new Error("Failed to create video entry");
      }
      
      // إنشاء stream للملف
      const fileStream = this.createUploadStream(
        file, 
        (loaded, total) => {
          if (onProgress) {
            const progress = Math.round((loaded / total) * 100);
            const now = Date.now();
            const bytesPerSecond = loaded / ((now - new Date(file.lastModified).getTime()) / 1000);
            onProgress(progress, bytesPerSecond);
          }
        }
      );
      
      // إجراء عملية الرفع باستخدام الـ Stream
      const uploadResponse = await fetch(
        `${this.videoBaseUrl}/library/${libraryId}/videos/${createResponse.guid}`,
        {
          method: "PUT",
          headers: {
            'Content-Type': 'application/octet-stream',
            'AccessKey': accessToken || this.getApiKey(libraryId, accessToken),
            'Accept': '*/*'
          },
          body: fileStream,
          signal
        }
      );

      if (!uploadResponse.ok) {
        throw new Error(`Upload failed with status ${uploadResponse.status}`);
      }

      // استخراج اسم المجموعة إذا كان متوفراً
      let collectionName = '';
      if (collectionId) {
        const collectionInfo = this.collectionHelper?.getCollectionInfo(libraryId, collectionId);
        if (collectionInfo) {
          collectionName = collectionInfo.name;
        }
      }

      return {
        ...createResponse,
        collectionName
      };
      
    } catch (error) {
      if (error.name === 'AbortError') {
        throw error;
      }
      console.error("Error uploading video:", error);
      throw error;
    }
  }

  // تحسين دالة إنشاء stream الرفع
  private createUploadStream(
    file: File,
    onProgress: (loaded: number, total: number) => void
  ): ReadableStream {
    const fileSize = file.size;
    const reader = file.stream().getReader();
    let loaded = 0;
    let lastProgressUpdate = Date.now();
    const progressUpdateInterval = 100; // تحديث كل 100 مللي ثانية

    return new ReadableStream({
      start(controller) {
        // تحسين أداء بدء القراءة
        setTimeout(pump, 0);
        
        function pump(): Promise<void> {
          return reader.read().then(({ done, value }) => {
            if (done) {
              controller.close();
              return;
            }
            
            loaded += value.length;
            
            // تحديث التقدم بمعدل أقل للتحسين
            const now = Date.now();
            if (now - lastProgressUpdate > progressUpdateInterval) {
              onProgress(loaded, fileSize);
              lastProgressUpdate = now;
            }
            
            controller.enqueue(value);
            return pump();
          }).catch(error => {
            console.error('Stream reading error:', error);
            controller.error(error);
          });
        }
      },
      
      cancel() {
        console.log('Upload stream cancelled');
        reader.cancel();
      }
    });
  }

  // Optional: Add method to fetch embed codes via backend, matching /get-bunny-embed-codes
  async getBunnyEmbedCodes(
    libraryId: string,
    accessToken: string,
    collectionId: string,
  ): Promise<any> {
    try {
      const response = await fetch("/get-bunny-embed-codes", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          bunny_library_id: libraryId.trim(),
          bunny_access_token: accessToken.trim(),
          bunny_collection_id: collectionId.trim(),
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `API error: ${response.status}`);
      }

      const result = await response.json();
      if (!result.videos || result.videos.length === 0) {
        throw new Error("No videos found in collection");
      }

      return result.videos
        .map((video: any) => ({
          guid: video.name.split(".")[0], // Assuming guid is part of the name or needs extraction
          title: video.name,
          embedCode: video.embed_code.player_code || video.embed_code, // Handle both string and object formats
        }))
        .sort((a: any, b: any) => {
          const baseNameA = a.title.split("Q")[0];
          const baseNameB = b.title.split("Q")[0];

          if (baseNameA !== baseNameB) {
            return baseNameA.localeCompare(baseNameB);
          }

          const numA = parseInt(a.title.match(/Q(\d+)/)?.[1] || "0");
          const numB = parseInt(b.title.match(/Q(\d+)/)?.[1] || "0");
          return numA - numB;
        });
    } catch (error) {
      console.error("Error getting embed codes:", error);
      throw error;
    }
  }

  async fetchAllLibraryData(mainApiKey: string): Promise<LibraryData> {
    try {
      // Update instance API key
      this.apiKey = mainApiKey;
      
      // Also update in cache
      cache.set('default_api_key', mainApiKey);
      
      if (!mainApiKey) {
        // Try to get from environment if not provided
        mainApiKey = import.meta.env.VITE_BUNNY_API_KEY;
        if (!mainApiKey) {
          throw new Error("Main API key is required");
        }
      }

      // Update instance and cache with new API key
      this.publicApiKey = mainApiKey;
      this.apiKey = mainApiKey;
      cache.set('default_api_key', mainApiKey);

      // Fetch libraries with the main API key
      const libraries = await this.getLibraries();
      
      // Cache each library's API key
      libraries.forEach(lib => {
        if (lib.apiKey) {
          cache.set(`library_${lib.id}_api`, lib.apiKey);
        }
      });

      // Fetch collections using library-specific keys
      const libraryInfos = await Promise.all(
        libraries.map(async (lib) => {
          // More descriptive logging to help debugging
          console.log(`Fetching collections for library ${lib.name} (${lib.id})`);
          
          let collections = [];
          try {
            collections = await this.getCollections(lib.id);
            console.log(`Found ${collections.length} collections for library ${lib.name}`);
          } catch (error) {
            console.error(`Error fetching collections for library ${lib.name}:`, error);
          }
          
          return {
            id: lib.id,
            name: lib.name,
            apiKey: lib.apiKey,
            collections: collections.map(col => ({
              id: col.id,
              name: col.name
            }))
          };
        })
      );

      const data: LibraryData = {
        lastUpdated: new Date().toISOString(),
        libraries: libraryInfos,
        mainApiKey
      };

      // First clear any potentially corrupted data
      localStorage.removeItem(this.storage["STORAGE_KEY"]);
      
      // Save to persistent storage
      console.log("About to save library data");
      await this.storage.saveLibraryData(data);
      console.log("Library data saved successfully");

      // Verify the save worked by doing a test read
      try {
        const testRead = this.storage.getLibraryData();
        console.log("Verification read success:", !!testRead);
      } catch (verifyError) {
        console.error("Verification read failed:", verifyError);
      }

      showToast({
        title: "🔄 Library Update Complete",
        description: `Updated ${libraryInfos.length} libraries\nTotal collections: ${
          libraryInfos.reduce((acc, lib) => acc + lib.collections.length, 0)
        }`,
        variant: "success",
        duration: 5000
      });

      return data;

    } catch (error) {
      showToast({
        title: "❌ Library Update Failed", 
        description: error instanceof Error ? error.message : "Unknown error occurred",
        variant: "destructive",
        duration: 5000
      });
      throw error;
    }
  }

  private async getStatisticsForDateRange(
    libraryId: string,
    startDate: Date,
    endDate: Date
  ): Promise<StatisticsResponse> {
    return this.fetchWithError(
      `${this.baseUrl}/statistics?` + new URLSearchParams({
        dateFrom: startDate.toISOString(),
        dateTo: endDate.toISOString(),
        pullZone: libraryId,
        serverZoneId: "-1",
        loadErrors: "false",
        hourly: "false"
      }),
      { method: "GET" }
    );
  }

  async getBandwidthStats(): Promise<void> {
    try {
      // Calculate date ranges in 30-day chunks for last 6 months
      const endDate = new Date();
      const startDate = new Date();
      startDate.setMonth(startDate.getMonth() - 6);
      
      const libraries = await this.getLibraries();
      const libraryData: { [key: string]: StatisticsResponse[] } = {};

      // For each library
      for (const library of libraries) {
        libraryData[library.name] = [];
        let currentEnd = new Date(endDate);
        let currentStart = new Date(currentEnd);
        currentStart.setDate(currentStart.getDate() - 30); // 30-day chunks

        // Get data in 30-day chunks
        while (currentStart >= startDate) {
          try {
            const response = await this.getStatisticsForDateRange(
              library.id,
              currentStart,
              currentEnd
            );
            
            if (response?.Statistics) {
              libraryData[library.name].push(response);
            }

            // Move to next chunk
            currentEnd = new Date(currentStart);
            currentStart.setDate(currentStart.getDate() - 30);
          } catch (error) {
            console.warn(`Failed to fetch chunk for ${library.name}:`, error);
            break; // Move to next library if chunk fails
          }
        }
      }

      // Get unique months from all data
      const months = new Set<string>();
      Object.values(libraryData).forEach(chunks => {
        chunks.forEach(chunk => {
          chunk.Statistics.forEach(stat => {
            const month = stat.Date.substring(0, 7);
            months.add(month);
          });
        });
      });

      // Sort months in reverse chronological order
      const sortedMonths = Array.from(months).sort().reverse();

      // Create Excel data
      const excelData = [['Library Name', ...sortedMonths]];

      // Add library rows
      Object.entries(libraryData).forEach(([libraryName, chunks]) => {
        const row = [libraryName];
        sortedMonths.forEach(month => {
          // Sum bandwidth across all chunks for this month
          const monthlyBandwidth = chunks
            .flatMap(chunk => chunk.Statistics)
            .filter(stat => stat.Date.startsWith(month))
            .reduce((sum, stat) => sum + (stat.TotalBytes / (1024 * 1024 * 1024)), 0);
          
          row.push(monthlyBandwidth.toFixed(2));
        });
        excelData.push(row);
      });

      // Add total row
      const totalRow = ['Total'];
      sortedMonths.forEach((_, columnIndex) => {
        const total = excelData
          .slice(1)
          .reduce((sum, row) => sum + Number(row[columnIndex + 1]), 0);
        totalRow.push(total.toFixed(2));
      });
      excelData.push(totalRow);

      // Create Excel workbook with same styling
      const wb = XLSX.utils.book_new();
      const ws = XLSX.utils.aoa_to_sheet(excelData);

      // Add column widths
      ws['!cols'] = [
        { wch: 30 },
        ...sortedMonths.map(() => ({ wch: 12 }))
      ];

      // Style header and total rows
      const headerRange = XLSX.utils.decode_range(ws['!ref'] || 'A1');
      for (let C = headerRange.s.c; C <= headerRange.e.c; ++C) {
        // Bold header row
        const headerAddress = XLSX.utils.encode_cell({ r: 0, c: C });
        if (!ws[headerAddress]) ws[headerAddress] = {};
        ws[headerAddress].s = { font: { bold: true } };

        // Bold total row
        const totalRowIndex = excelData.length - 1;
        const totalAddress = XLSX.utils.encode_cell({ r: totalRowIndex, c: C });
        if (!ws[totalAddress]) ws[totalAddress] = {};
        ws[totalAddress].s = { font: { bold: true } };
      }

      XLSX.utils.book_append_sheet(wb, ws, "Bandwidth Usage");

      // Save file
      const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
      const fileName = `bandwidth_stats_${new Date().toISOString().split('T')[0]}.xlsx`;
      const blob = new Blob([excelBuffer], { 
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      });
      saveAs(blob, fileName);

    } catch (error) {
      console.error("Error downloading bandwidth stats:", error);
      throw error instanceof Error 
        ? error 
        : new Error("Failed to download bandwidth statistics");
    }
  }
}

export const bunnyService = new BunnyService();
